//////////////////////////////////////////////////////////////////////////////////////////////////////////
// MPG Collection
// represents a collection of mpg items plus some additional data and function
//////////////////////////////////////////////////////////////////////////////////////////////////////////
import {MpgItem, MpgItemType} from './mpgitem'
export class MpgCollection {
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // data
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    private items: MpgItem[]
    readonly type: MpgItemType
    private sumOfItemPri: number 
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // constructor
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    constructor (typeParam: MpgItemType) {
        this.type = typeParam
        this.items = []
        this.sumOfItemPri = 0
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // create item
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    createItem = (name: string, pri: number): void => {
        const newItem = new MpgItem(-1, this.type, name, pri)
        this.items.push(newItem)
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // update item
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    updateItem = (id: number, name: string, pri: number): void => {
        const item = this.getItemById(id)
        if(item != undefined){
            item.setName(name)
            item.setPriority(pri)
        }else{
            console.log("MpgCollection:updateItem: item not found. Id:",id) //todo: should use throw!!!
        }
   
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // get item by id
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    getItemById = (idParam: number): MpgItem | undefined =>{
        let foundItem: MpgItem | undefined = undefined
        for(let item of this.items){
            if(item.getId() == idParam){
                foundItem = item
            }
        }
        if(foundItem == undefined){
            console.log("MpgCollection:getItemById: item not found. Id:",idParam) //todo: should use throw!!!
        }
        return foundItem
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // update sum of items priority  
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    private updateSumOfItemPri = () : void => {
        this.sumOfItemPri = 0
            for(let item of this.items){
                this.sumOfItemPri += item.getPriority()
            }
        
    }
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   // get sum of item pri       
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   getSumOfItemPri = () : number => {
       return this.sumOfItemPri
   }
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   // get items
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   getItems = () : MpgItem[] => {
       // return sorted item by priority
       this.updateSumOfItemPri()
       return this.items.sort((item1, item2) => {return (item2.getPriority() - item1.getPriority())})
   }
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   // increase item priority
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   increaseItemPriority = (idParam: number): void => {
        const item = this.getItemById(idParam)
        if(item != undefined){
            item.setPriority(item.getPriority()+1)
        }else{
            console.log("MpgCollection:increaseItemPriority: item not found. Id:",idParam) //todo: should use throw!!!
        }
   }
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   // decrease item priority
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   decreaseItemPriority = (idParam: number): void => {
        const item = this.getItemById(idParam)
        if(item != undefined){
            item.setPriority(item.getPriority()-1)
        }else{
            console.log("MpgCollection:decreaseItemPriority: item not found. Id:",idParam) //todo: should use throw!!!
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // delete item
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    deleteItem = (idParam: number): void => {
        const index = this.getIndexById(idParam)
        if(index != -1){
            this.items.splice(index,1)
        }else{
            console.log("MpgCollection:deleteItem: item not found. Id:",idParam) //todo: should use throw!!!
        }
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // get index of item with an id
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    private getIndexById = (idParam: number): number => {
        let foundIndex: number = -1
        for(let index = 0; index < this.items.length; index++){
            if(this.items[index].getId() == idParam){
                foundIndex = index
            }
        }
        if(foundIndex == -1 ){
            console.log("MpgData:getIndex: item not found with id: ",idParam) // todo: need a standard way to report and log errors
        }
        return foundIndex
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    // add item (usually as a result of loading data)
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    addItem = (item: MpgItem): void => {
        this.items.push(item)
    }
}